[async_controller]
async_controller.max_digiline_messages_per_event (Maximum amount of digilines messages per event) int 150

# In code events, code event is an action that happens in lua
# by default this is 10 times the amount of the normal luac, set 0 to disable 
async_controller.maxevents (Async controller execution code-event limit, set 0 to disable) int 100000

# in microseconds, 1 milisecond is 1 000 microseconds
# set 0 to disable
async_controller.execution_time_limit (Async controller execution time limit) int 10000

# basically uhh... if you set this to one, the hook (sandbox ratelimiter) code
# will execute for every code event
# if you set this to like 10, it will execute every 10 code events
# The hook is used for ratelimiting
# So basically this is "How often should the ratelimiting code run"
# Setting it above or equal to async_controller.maxevents basically disables all other forms of ratelimiting (bad bad)
async_controller.hook_time (How often should the hook execute) int 10

# In characters, how big can the code inside modify_self get
async_controller.modify_self_max_code_len (modify_self maximum code length) int 50000

# In megabytes, please keep this at a high number to minimize the outside influence
# Or set to 0 to disable this kind of ratelimiting
# The way it works is:
# 1) Get the lua memory usage before the execution starts
# 2) On the hook: check if the difference between current lua memory usage and the previous memory usage is higher than this setting
# 3) if it is, stop the execution
# So yeah if you want the async_controller to be 1000% reliable you should set this setting to 0
async_controller.max_sandbox_mem_size (How much memory can the sandbox consume before error'ing) int 50

# enable env_plus, an !experimental! environment
async_controller.env_plus (Enable env_plus ! experimental !) bool true